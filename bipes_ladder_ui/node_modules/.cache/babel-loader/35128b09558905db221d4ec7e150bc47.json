{"ast":null,"code":"import _objectSpread from \"/home/andouglas/Documents/BipesLadder/BipesLadder/bipes_ladder_ui/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/andouglas/Documents/BipesLadder/BipesLadder/bipes_ladder_ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/andouglas/Documents/BipesLadder/BipesLadder/bipes_ladder_ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport shortid from \"shortid\";\nimport { ROW, COLUMN, COMPONENT } from \"./constants\"; // a little function to help us with reordering the result\n\nexport var reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed); // inserting task in new index\n\n  return result;\n};\nexport var remove = function remove(arr, index) {\n  return [].concat(_toConsumableArray(arr.slice(0, index)), _toConsumableArray(arr.slice(index + 1)));\n};\nexport var insert = function insert(arr, index, newItem) {\n  return [].concat(_toConsumableArray(arr.slice(0, index)), [// inserted item\n  newItem], _toConsumableArray(arr.slice(index)));\n};\nexport var reorderChildren = function reorderChildren(children, splitDropZonePath, splitItemPath) {\n  if (splitDropZonePath.length === 1) {\n    var dropZoneIndex = Number(splitDropZonePath[0]);\n    var itemIndex = Number(splitItemPath[0]);\n    return reorder(children, itemIndex, dropZoneIndex);\n  }\n\n  var updatedChildren = _toConsumableArray(children);\n\n  var curIndex = Number(splitDropZonePath.slice(0, 1)); // Update the specific node's children\n\n  var splitDropZoneChildrenPath = splitDropZonePath.slice(1);\n  var splitItemChildrenPath = splitItemPath.slice(1);\n  var nodeChildren = updatedChildren[curIndex];\n  updatedChildren[curIndex] = _objectSpread({}, nodeChildren, {\n    children: reorderChildren(nodeChildren.children, splitDropZoneChildrenPath, splitItemChildrenPath)\n  });\n  return updatedChildren;\n};\nexport var removeChildFromChildren = function removeChildFromChildren(children, splitItemPath) {\n  if (splitItemPath.length === 1) {\n    var itemIndex = Number(splitItemPath[0]);\n    return remove(children, itemIndex);\n  }\n\n  var updatedChildren = _toConsumableArray(children);\n\n  var curIndex = Number(splitItemPath.slice(0, 1)); // Update the specific node's children\n\n  var splitItemChildrenPath = splitItemPath.slice(1);\n  var nodeChildren = updatedChildren[curIndex];\n  updatedChildren[curIndex] = _objectSpread({}, nodeChildren, {\n    children: removeChildFromChildren(nodeChildren.children, splitItemChildrenPath)\n  });\n  return updatedChildren;\n};\nexport var addChildToChildren = function addChildToChildren(children, splitDropZonePath, item) {\n  if (splitDropZonePath.length === 1) {\n    var dropZoneIndex = Number(splitDropZonePath[0]);\n    return insert(children, dropZoneIndex, item);\n  }\n\n  var updatedChildren = _toConsumableArray(children);\n\n  var curIndex = Number(splitDropZonePath.slice(0, 1)); // Update the specific node's children\n\n  var splitItemChildrenPath = splitDropZonePath.slice(1);\n  var nodeChildren = updatedChildren[curIndex];\n  updatedChildren[curIndex] = _objectSpread({}, nodeChildren, {\n    children: addChildToChildren(nodeChildren.children, splitItemChildrenPath, item)\n  });\n  return updatedChildren;\n};\nexport var handleMoveWithinParent = function handleMoveWithinParent(layout, splitDropZonePath, splitItemPath) {\n  return reorderChildren(layout, splitDropZonePath, splitItemPath);\n};\nexport var handleAddColumDataToRow = function handleAddColumDataToRow(layout) {\n  var layoutCopy = _toConsumableArray(layout);\n\n  var COLUMN_STRUCTURE = {\n    type: COLUMN,\n    id: shortid.generate(),\n    children: []\n  };\n  return layoutCopy.map(function (row) {\n    if (!row.children.length) {\n      row.children = [COLUMN_STRUCTURE];\n    }\n\n    return row;\n  });\n};\nexport var handleMoveToDifferentParent = function handleMoveToDifferentParent(layout, splitDropZonePath, splitItemPath, item) {\n  var newLayoutStructure;\n  var COLUMN_STRUCTURE = {\n    type: COLUMN,\n    id: shortid.generate(),\n    children: [item]\n  };\n  var ROW_STRUCTURE = {\n    type: ROW,\n    id: shortid.generate()\n  };\n\n  switch (splitDropZonePath.length) {\n    case 1:\n      {\n        // moving column outside into new row made on the fly\n        if (item.type === COLUMN) {\n          newLayoutStructure = _objectSpread({}, ROW_STRUCTURE, {\n            children: [item]\n          });\n        } else {\n          // moving component outside into new row made on the fly\n          newLayoutStructure = _objectSpread({}, ROW_STRUCTURE, {\n            children: [COLUMN_STRUCTURE]\n          });\n        }\n\n        break;\n      }\n\n    case 2:\n      {\n        // moving component outside into a row which creates column\n        if (item.type === COMPONENT) {\n          newLayoutStructure = COLUMN_STRUCTURE;\n        } else {\n          // moving column into existing row\n          newLayoutStructure = item;\n        }\n\n        break;\n      }\n\n    default:\n      {\n        newLayoutStructure = item;\n      }\n  }\n\n  var updatedLayout = layout;\n  updatedLayout = removeChildFromChildren(updatedLayout, splitItemPath);\n  updatedLayout = handleAddColumDataToRow(updatedLayout);\n  updatedLayout = addChildToChildren(updatedLayout, splitDropZonePath, newLayoutStructure);\n  return updatedLayout;\n};\nexport var handleMoveSidebarComponentIntoParent = function handleMoveSidebarComponentIntoParent(layout, splitDropZonePath, item) {\n  var newLayoutStructure;\n\n  switch (splitDropZonePath.length) {\n    case 1:\n      {\n        newLayoutStructure = {\n          type: ROW,\n          id: shortid.generate(),\n          children: [{\n            type: COLUMN,\n            id: shortid.generate(),\n            children: [item]\n          }]\n        };\n        break;\n      }\n\n    case 2:\n      {\n        newLayoutStructure = {\n          type: COLUMN,\n          id: shortid.generate(),\n          children: [item]\n        };\n        break;\n      }\n\n    default:\n      {\n        newLayoutStructure = item;\n      }\n  }\n\n  return addChildToChildren(layout, splitDropZonePath, newLayoutStructure);\n};\nexport var handleRemoveItemFromLayout = function handleRemoveItemFromLayout(layout, splitItemPath) {\n  return removeChildFromChildren(layout, splitItemPath);\n};\n/*JSON Handle*/\n\nexport var createJSON = function createJSON(obj) {\n  return JSON.stringify(obj);\n};\nexport var parseJSON = function parseJSON(json) {\n  return JSON.parse(json);\n};","map":{"version":3,"sources":["/home/andouglas/Documents/BipesLadder/BipesLadder/bipes_ladder_ui/src/helpers.js"],"names":["shortid","ROW","COLUMN","COMPONENT","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","remove","arr","index","slice","insert","newItem","reorderChildren","children","splitDropZonePath","splitItemPath","length","dropZoneIndex","Number","itemIndex","updatedChildren","curIndex","splitDropZoneChildrenPath","splitItemChildrenPath","nodeChildren","removeChildFromChildren","addChildToChildren","item","handleMoveWithinParent","layout","handleAddColumDataToRow","layoutCopy","COLUMN_STRUCTURE","type","id","generate","map","row","handleMoveToDifferentParent","newLayoutStructure","ROW_STRUCTURE","updatedLayout","handleMoveSidebarComponentIntoParent","handleRemoveItemFromLayout","createJSON","obj","JSON","stringify","parseJSON","json","parse"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\nimport { ROW, COLUMN, COMPONENT } from \"./constants\";\n\n// a little function to help us with reordering the result\nexport const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed); // inserting task in new index\n\n    return result;\n};\n\nexport const remove = (arr, index) => [\n    // part of the array before the specified index\n    ...arr.slice(0, index),\n    // part of the array after the specified index\n    ...arr.slice(index + 1)\n];\n\nexport const insert = (arr, index, newItem) => [\n    // part of the array before the specified index\n    ...arr.slice(0, index),\n    // inserted item\n    newItem,\n    // part of the array after the specified index\n    ...arr.slice(index)\n];\n\nexport const reorderChildren = (children, splitDropZonePath, splitItemPath) => {\n    if (splitDropZonePath.length === 1) {\n        const dropZoneIndex = Number(splitDropZonePath[0]);\n        const itemIndex = Number(splitItemPath[0]);\n        return reorder(children, itemIndex, dropZoneIndex);\n    }\n\n    const updatedChildren = [...children];\n\n    const curIndex = Number(splitDropZonePath.slice(0, 1));\n\n    // Update the specific node's children\n    const splitDropZoneChildrenPath = splitDropZonePath.slice(1);\n    const splitItemChildrenPath = splitItemPath.slice(1);\n    const nodeChildren = updatedChildren[curIndex];\n    updatedChildren[curIndex] = {\n        ...nodeChildren,\n        children: reorderChildren(\n            nodeChildren.children,\n            splitDropZoneChildrenPath,\n            splitItemChildrenPath\n        )\n    };\n\n    return updatedChildren;\n};\n\nexport const removeChildFromChildren = (children, splitItemPath) => {\n    if (splitItemPath.length === 1) {\n        const itemIndex = Number(splitItemPath[0]);\n        return remove(children, itemIndex);\n    }\n\n    const updatedChildren = [...children];\n\n    const curIndex = Number(splitItemPath.slice(0, 1));\n\n    // Update the specific node's children\n    const splitItemChildrenPath = splitItemPath.slice(1);\n    const nodeChildren = updatedChildren[curIndex];\n    updatedChildren[curIndex] = {\n        ...nodeChildren,\n        children: removeChildFromChildren(\n            nodeChildren.children,\n            splitItemChildrenPath\n        )\n    };\n\n    return updatedChildren;\n};\n\nexport const addChildToChildren = (children, splitDropZonePath, item) => {\n    if (splitDropZonePath.length === 1) {\n        const dropZoneIndex = Number(splitDropZonePath[0]);\n        return insert(children, dropZoneIndex, item);\n    }\n\n    const updatedChildren = [...children];\n\n    const curIndex = Number(splitDropZonePath.slice(0, 1));\n\n    // Update the specific node's children\n    const splitItemChildrenPath = splitDropZonePath.slice(1);\n    const nodeChildren = updatedChildren[curIndex];\n    updatedChildren[curIndex] = {\n        ...nodeChildren,\n        children: addChildToChildren(\n            nodeChildren.children,\n            splitItemChildrenPath,\n            item\n        )\n    };\n\n    return updatedChildren;\n};\n\nexport const handleMoveWithinParent = (\n    layout,\n    splitDropZonePath,\n    splitItemPath\n) => {\n    return reorderChildren(layout, splitDropZonePath, splitItemPath);\n};\n\nexport const handleAddColumDataToRow = layout => {\n    const layoutCopy = [...layout];\n    const COLUMN_STRUCTURE = {\n        type: COLUMN,\n        id: shortid.generate(),\n        children: []\n    };\n\n    return layoutCopy.map(row => {\n        if (!row.children.length) {\n            row.children = [COLUMN_STRUCTURE];\n        }\n        return row;\n    });\n};\n\nexport const handleMoveToDifferentParent = (\n    layout,\n    splitDropZonePath,\n    splitItemPath,\n    item\n) => {\n    let newLayoutStructure;\n    const COLUMN_STRUCTURE = {\n        type: COLUMN,\n        id: shortid.generate(),\n        children: [item]\n    };\n\n    const ROW_STRUCTURE = {\n        type: ROW,\n        id: shortid.generate()\n    };\n\n    switch (splitDropZonePath.length) {\n        case 1:\n            {\n                // moving column outside into new row made on the fly\n                if (item.type === COLUMN) {\n                    newLayoutStructure = {\n                        ...ROW_STRUCTURE,\n                        children: [item]\n                    };\n                } else {\n                    // moving component outside into new row made on the fly\n                    newLayoutStructure = {\n                        ...ROW_STRUCTURE,\n                        children: [COLUMN_STRUCTURE]\n                    };\n                }\n                break;\n            }\n        case 2:\n            {\n                // moving component outside into a row which creates column\n                if (item.type === COMPONENT) {\n                    newLayoutStructure = COLUMN_STRUCTURE;\n                } else {\n                    // moving column into existing row\n                    newLayoutStructure = item;\n                }\n\n                break;\n            }\n        default:\n            {\n                newLayoutStructure = item;\n            }\n    }\n\n    let updatedLayout = layout;\n    updatedLayout = removeChildFromChildren(updatedLayout, splitItemPath);\n    updatedLayout = handleAddColumDataToRow(updatedLayout);\n    updatedLayout = addChildToChildren(\n        updatedLayout,\n        splitDropZonePath,\n        newLayoutStructure\n    );\n\n    return updatedLayout;\n};\n\nexport const handleMoveSidebarComponentIntoParent = (\n    layout,\n    splitDropZonePath,\n    item\n) => {\n    let newLayoutStructure;\n    switch (splitDropZonePath.length) {\n        case 1:\n            {\n                newLayoutStructure = {\n                    type: ROW,\n                    id: shortid.generate(),\n                    children: [{ type: COLUMN, id: shortid.generate(), children: [item] }]\n                };\n                break;\n            }\n        case 2:\n            {\n                newLayoutStructure = {\n                    type: COLUMN,\n                    id: shortid.generate(),\n                    children: [item]\n                };\n                break;\n            }\n        default:\n            {\n                newLayoutStructure = item;\n            }\n    }\n\n    return addChildToChildren(layout, splitDropZonePath, newLayoutStructure);\n};\n\nexport const handleRemoveItemFromLayout = (layout, splitItemPath) => {\n    return removeChildFromChildren(layout, splitItemPath);\n};\n\n/*JSON Handle*/\nexport const createJSON = (obj) => {\n    return JSON.stringify(obj);\n};\n\nexport const parseJSON = (json) => {\n    return JSON.parse(json);\n};"]},"metadata":{},"sourceType":"module"}